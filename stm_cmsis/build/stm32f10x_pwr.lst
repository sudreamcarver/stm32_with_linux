ARM GAS  /tmp/ccD4b4aw.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f10x_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "./Drivers/src/stm32f10x_pwr.c"
  18              		.section	.text.PWR_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	PWR_DeInit
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	PWR_DeInit:
  26              	.LFB29:
   1:./Drivers/src/stm32f10x_pwr.c **** /**
   2:./Drivers/src/stm32f10x_pwr.c ****   ******************************************************************************
   3:./Drivers/src/stm32f10x_pwr.c ****   * @file    stm32f10x_pwr.c
   4:./Drivers/src/stm32f10x_pwr.c ****   * @author  MCD Application Team
   5:./Drivers/src/stm32f10x_pwr.c ****   * @version V3.6.2
   6:./Drivers/src/stm32f10x_pwr.c ****   * @date    17-September-2021
   7:./Drivers/src/stm32f10x_pwr.c ****   * @brief   This file provides all the PWR firmware functions.
   8:./Drivers/src/stm32f10x_pwr.c ****   ******************************************************************************
   9:./Drivers/src/stm32f10x_pwr.c ****   * @attention
  10:./Drivers/src/stm32f10x_pwr.c ****   *
  11:./Drivers/src/stm32f10x_pwr.c ****   * Copyright (c) 2012 STMicroelectronics.
  12:./Drivers/src/stm32f10x_pwr.c ****   * All rights reserved.
  13:./Drivers/src/stm32f10x_pwr.c ****   *
  14:./Drivers/src/stm32f10x_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  15:./Drivers/src/stm32f10x_pwr.c ****   * in the root directory of this software component.
  16:./Drivers/src/stm32f10x_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  17:./Drivers/src/stm32f10x_pwr.c ****   *
  18:./Drivers/src/stm32f10x_pwr.c ****   ******************************************************************************
  19:./Drivers/src/stm32f10x_pwr.c ****   */
  20:./Drivers/src/stm32f10x_pwr.c **** 
  21:./Drivers/src/stm32f10x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  22:./Drivers/src/stm32f10x_pwr.c **** #include "stm32f10x_pwr.h"
  23:./Drivers/src/stm32f10x_pwr.c **** #include "stm32f10x_rcc.h"
  24:./Drivers/src/stm32f10x_pwr.c **** 
  25:./Drivers/src/stm32f10x_pwr.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:./Drivers/src/stm32f10x_pwr.c ****   * @{
  27:./Drivers/src/stm32f10x_pwr.c ****   */
  28:./Drivers/src/stm32f10x_pwr.c **** 
  29:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR 
  30:./Drivers/src/stm32f10x_pwr.c ****   * @brief PWR driver modules
  31:./Drivers/src/stm32f10x_pwr.c ****   * @{
  32:./Drivers/src/stm32f10x_pwr.c ****   */ 
ARM GAS  /tmp/ccD4b4aw.s 			page 2


  33:./Drivers/src/stm32f10x_pwr.c **** 
  34:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_TypesDefinitions
  35:./Drivers/src/stm32f10x_pwr.c ****   * @{
  36:./Drivers/src/stm32f10x_pwr.c ****   */
  37:./Drivers/src/stm32f10x_pwr.c **** 
  38:./Drivers/src/stm32f10x_pwr.c **** /**
  39:./Drivers/src/stm32f10x_pwr.c ****   * @}
  40:./Drivers/src/stm32f10x_pwr.c ****   */
  41:./Drivers/src/stm32f10x_pwr.c **** 
  42:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Defines
  43:./Drivers/src/stm32f10x_pwr.c ****   * @{
  44:./Drivers/src/stm32f10x_pwr.c ****   */
  45:./Drivers/src/stm32f10x_pwr.c **** 
  46:./Drivers/src/stm32f10x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:./Drivers/src/stm32f10x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:./Drivers/src/stm32f10x_pwr.c **** 
  49:./Drivers/src/stm32f10x_pwr.c **** /* --- CR Register ---*/
  50:./Drivers/src/stm32f10x_pwr.c **** 
  51:./Drivers/src/stm32f10x_pwr.c **** /* Alias word address of DBP bit */
  52:./Drivers/src/stm32f10x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:./Drivers/src/stm32f10x_pwr.c **** #define DBP_BitNumber            0x08
  54:./Drivers/src/stm32f10x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:./Drivers/src/stm32f10x_pwr.c **** 
  56:./Drivers/src/stm32f10x_pwr.c **** /* Alias word address of PVDE bit */
  57:./Drivers/src/stm32f10x_pwr.c **** #define PVDE_BitNumber           0x04
  58:./Drivers/src/stm32f10x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:./Drivers/src/stm32f10x_pwr.c **** 
  60:./Drivers/src/stm32f10x_pwr.c **** /* --- CSR Register ---*/
  61:./Drivers/src/stm32f10x_pwr.c **** 
  62:./Drivers/src/stm32f10x_pwr.c **** /* Alias word address of EWUP bit */
  63:./Drivers/src/stm32f10x_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  64:./Drivers/src/stm32f10x_pwr.c **** #define EWUP_BitNumber           0x08
  65:./Drivers/src/stm32f10x_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  66:./Drivers/src/stm32f10x_pwr.c **** 
  67:./Drivers/src/stm32f10x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  68:./Drivers/src/stm32f10x_pwr.c **** 
  69:./Drivers/src/stm32f10x_pwr.c **** /* CR register bit mask */
  70:./Drivers/src/stm32f10x_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  71:./Drivers/src/stm32f10x_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  72:./Drivers/src/stm32f10x_pwr.c **** 
  73:./Drivers/src/stm32f10x_pwr.c **** 
  74:./Drivers/src/stm32f10x_pwr.c **** /**
  75:./Drivers/src/stm32f10x_pwr.c ****   * @}
  76:./Drivers/src/stm32f10x_pwr.c ****   */
  77:./Drivers/src/stm32f10x_pwr.c **** 
  78:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Macros
  79:./Drivers/src/stm32f10x_pwr.c ****   * @{
  80:./Drivers/src/stm32f10x_pwr.c ****   */
  81:./Drivers/src/stm32f10x_pwr.c **** 
  82:./Drivers/src/stm32f10x_pwr.c **** /**
  83:./Drivers/src/stm32f10x_pwr.c ****   * @}
  84:./Drivers/src/stm32f10x_pwr.c ****   */
  85:./Drivers/src/stm32f10x_pwr.c **** 
  86:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Variables
  87:./Drivers/src/stm32f10x_pwr.c ****   * @{
  88:./Drivers/src/stm32f10x_pwr.c ****   */
  89:./Drivers/src/stm32f10x_pwr.c **** 
ARM GAS  /tmp/ccD4b4aw.s 			page 3


  90:./Drivers/src/stm32f10x_pwr.c **** /**
  91:./Drivers/src/stm32f10x_pwr.c ****   * @}
  92:./Drivers/src/stm32f10x_pwr.c ****   */
  93:./Drivers/src/stm32f10x_pwr.c **** 
  94:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_FunctionPrototypes
  95:./Drivers/src/stm32f10x_pwr.c ****   * @{
  96:./Drivers/src/stm32f10x_pwr.c ****   */
  97:./Drivers/src/stm32f10x_pwr.c **** 
  98:./Drivers/src/stm32f10x_pwr.c **** /**
  99:./Drivers/src/stm32f10x_pwr.c ****   * @}
 100:./Drivers/src/stm32f10x_pwr.c ****   */
 101:./Drivers/src/stm32f10x_pwr.c **** 
 102:./Drivers/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Functions
 103:./Drivers/src/stm32f10x_pwr.c ****   * @{
 104:./Drivers/src/stm32f10x_pwr.c ****   */
 105:./Drivers/src/stm32f10x_pwr.c **** 
 106:./Drivers/src/stm32f10x_pwr.c **** /**
 107:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
 108:./Drivers/src/stm32f10x_pwr.c ****   * @param  None
 109:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 110:./Drivers/src/stm32f10x_pwr.c ****   */
 111:./Drivers/src/stm32f10x_pwr.c **** void PWR_DeInit(void)
 112:./Drivers/src/stm32f10x_pwr.c **** {
  27              		.loc 1 112 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
 113:./Drivers/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  36              		.loc 1 113 3 view .LVU1
  37 0002 0121     		movs	r1, #1
  38 0004 4FF08050 		mov	r0, #268435456
  39 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  40              	.LVL0:
 114:./Drivers/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  41              		.loc 1 114 3 view .LVU2
  42 000c 0021     		movs	r1, #0
  43 000e 4FF08050 		mov	r0, #268435456
  44 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  45              	.LVL1:
 115:./Drivers/src/stm32f10x_pwr.c **** }
  46              		.loc 1 115 1 is_stmt 0 view .LVU3
  47 0016 08BD     		pop	{r3, pc}
  48              		.cfi_endproc
  49              	.LFE29:
  51              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  52              		.align	1
  53              		.global	PWR_BackupAccessCmd
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  58              	PWR_BackupAccessCmd:
  59              	.LVL2:
ARM GAS  /tmp/ccD4b4aw.s 			page 4


  60              	.LFB30:
 116:./Drivers/src/stm32f10x_pwr.c **** 
 117:./Drivers/src/stm32f10x_pwr.c **** /**
 118:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Enables or disables access to the RTC and backup registers.
 119:./Drivers/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the access to the RTC and backup registers.
 120:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 121:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 122:./Drivers/src/stm32f10x_pwr.c ****   */
 123:./Drivers/src/stm32f10x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 124:./Drivers/src/stm32f10x_pwr.c **** {
  61              		.loc 1 124 1 is_stmt 1 view -0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
 125:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 126:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
  66              		.loc 1 126 3 view .LVU5
 127:./Drivers/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  67              		.loc 1 127 3 view .LVU6
  68              		.loc 1 127 32 is_stmt 0 view .LVU7
  69 0000 014B     		ldr	r3, .L4
  70 0002 1862     		str	r0, [r3, #32]
 128:./Drivers/src/stm32f10x_pwr.c **** }
  71              		.loc 1 128 1 view .LVU8
  72 0004 7047     		bx	lr
  73              	.L5:
  74 0006 00BF     		.align	2
  75              	.L4:
  76 0008 00000E42 		.word	1108213760
  77              		.cfi_endproc
  78              	.LFE30:
  80              		.section	.text.PWR_PVDCmd,"ax",%progbits
  81              		.align	1
  82              		.global	PWR_PVDCmd
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  87              	PWR_PVDCmd:
  88              	.LVL3:
  89              	.LFB31:
 129:./Drivers/src/stm32f10x_pwr.c **** 
 130:./Drivers/src/stm32f10x_pwr.c **** /**
 131:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 132:./Drivers/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the PVD.
 133:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 134:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 135:./Drivers/src/stm32f10x_pwr.c ****   */
 136:./Drivers/src/stm32f10x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 137:./Drivers/src/stm32f10x_pwr.c **** {
  90              		.loc 1 137 1 is_stmt 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 138:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 139:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccD4b4aw.s 			page 5


  95              		.loc 1 139 3 view .LVU10
 140:./Drivers/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
  96              		.loc 1 140 3 view .LVU11
  97              		.loc 1 140 33 is_stmt 0 view .LVU12
  98 0000 014B     		ldr	r3, .L7
  99 0002 1861     		str	r0, [r3, #16]
 141:./Drivers/src/stm32f10x_pwr.c **** }
 100              		.loc 1 141 1 view .LVU13
 101 0004 7047     		bx	lr
 102              	.L8:
 103 0006 00BF     		.align	2
 104              	.L7:
 105 0008 00000E42 		.word	1108213760
 106              		.cfi_endproc
 107              	.LFE31:
 109              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 110              		.align	1
 111              		.global	PWR_PVDLevelConfig
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	PWR_PVDLevelConfig:
 117              	.LVL4:
 118              	.LFB32:
 142:./Drivers/src/stm32f10x_pwr.c **** 
 143:./Drivers/src/stm32f10x_pwr.c **** /**
 144:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 145:./Drivers/src/stm32f10x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 146:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 147:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
 148:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
 149:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
 150:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
 151:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
 152:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
 153:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
 154:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
 155:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 156:./Drivers/src/stm32f10x_pwr.c ****   */
 157:./Drivers/src/stm32f10x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 158:./Drivers/src/stm32f10x_pwr.c **** {
 119              		.loc 1 158 1 is_stmt 1 view -0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 159:./Drivers/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 124              		.loc 1 159 3 view .LVU15
 160:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 161:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 125              		.loc 1 161 3 view .LVU16
 162:./Drivers/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 126              		.loc 1 162 3 view .LVU17
 127              		.loc 1 162 10 is_stmt 0 view .LVU18
 128 0000 034A     		ldr	r2, .L10
 129 0002 1368     		ldr	r3, [r2]
 130              	.LVL5:
ARM GAS  /tmp/ccD4b4aw.s 			page 6


 163:./Drivers/src/stm32f10x_pwr.c ****   /* Clear PLS[7:5] bits */
 164:./Drivers/src/stm32f10x_pwr.c ****   tmpreg &= CR_PLS_MASK;
 131              		.loc 1 164 3 is_stmt 1 view .LVU19
 132              		.loc 1 164 10 is_stmt 0 view .LVU20
 133 0004 23F0E003 		bic	r3, r3, #224
 134              	.LVL6:
 165:./Drivers/src/stm32f10x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 166:./Drivers/src/stm32f10x_pwr.c ****   tmpreg |= PWR_PVDLevel;
 135              		.loc 1 166 3 is_stmt 1 view .LVU21
 136              		.loc 1 166 10 is_stmt 0 view .LVU22
 137 0008 0343     		orrs	r3, r3, r0
 138              	.LVL7:
 167:./Drivers/src/stm32f10x_pwr.c ****   /* Store the new value */
 168:./Drivers/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 139              		.loc 1 168 3 is_stmt 1 view .LVU23
 140              		.loc 1 168 11 is_stmt 0 view .LVU24
 141 000a 1360     		str	r3, [r2]
 169:./Drivers/src/stm32f10x_pwr.c **** }
 142              		.loc 1 169 1 view .LVU25
 143 000c 7047     		bx	lr
 144              	.L11:
 145 000e 00BF     		.align	2
 146              	.L10:
 147 0010 00700040 		.word	1073770496
 148              		.cfi_endproc
 149              	.LFE32:
 151              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 152              		.align	1
 153              		.global	PWR_WakeUpPinCmd
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 158              	PWR_WakeUpPinCmd:
 159              	.LVL8:
 160              	.LFB33:
 170:./Drivers/src/stm32f10x_pwr.c **** 
 171:./Drivers/src/stm32f10x_pwr.c **** /**
 172:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 173:./Drivers/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 174:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 175:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 176:./Drivers/src/stm32f10x_pwr.c ****   */
 177:./Drivers/src/stm32f10x_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 178:./Drivers/src/stm32f10x_pwr.c **** {
 161              		.loc 1 178 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 179:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 180:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 166              		.loc 1 180 3 view .LVU27
 181:./Drivers/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 167              		.loc 1 181 3 view .LVU28
 168              		.loc 1 181 34 is_stmt 0 view .LVU29
 169 0000 014B     		ldr	r3, .L13
 170 0002 C3F8A000 		str	r0, [r3, #160]
ARM GAS  /tmp/ccD4b4aw.s 			page 7


 182:./Drivers/src/stm32f10x_pwr.c **** }
 171              		.loc 1 182 1 view .LVU30
 172 0006 7047     		bx	lr
 173              	.L14:
 174              		.align	2
 175              	.L13:
 176 0008 00000E42 		.word	1108213760
 177              		.cfi_endproc
 178              	.LFE33:
 180              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 181              		.align	1
 182              		.global	PWR_EnterSTOPMode
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 187              	PWR_EnterSTOPMode:
 188              	.LVL9:
 189              	.LFB34:
 183:./Drivers/src/stm32f10x_pwr.c **** 
 184:./Drivers/src/stm32f10x_pwr.c **** /**
 185:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Enters STOP mode.
 186:./Drivers/src/stm32f10x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 187:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 188:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_ON: STOP mode with regulator ON
 189:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 190:./Drivers/src/stm32f10x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 191:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 192:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 193:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 194:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 195:./Drivers/src/stm32f10x_pwr.c ****   */
 196:./Drivers/src/stm32f10x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 197:./Drivers/src/stm32f10x_pwr.c **** {
 190              		.loc 1 197 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 198:./Drivers/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 195              		.loc 1 198 3 view .LVU32
 199:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 200:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 196              		.loc 1 200 3 view .LVU33
 201:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 197              		.loc 1 201 3 view .LVU34
 202:./Drivers/src/stm32f10x_pwr.c ****   
 203:./Drivers/src/stm32f10x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 204:./Drivers/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 198              		.loc 1 204 3 view .LVU35
 199              		.loc 1 204 10 is_stmt 0 view .LVU36
 200 0000 0A4A     		ldr	r2, .L19
 201 0002 1368     		ldr	r3, [r2]
 202              	.LVL10:
 205:./Drivers/src/stm32f10x_pwr.c ****   /* Clear PDDS and LPDS bits */
 206:./Drivers/src/stm32f10x_pwr.c ****   tmpreg &= CR_DS_MASK;
 203              		.loc 1 206 3 is_stmt 1 view .LVU37
 204              		.loc 1 206 10 is_stmt 0 view .LVU38
ARM GAS  /tmp/ccD4b4aw.s 			page 8


 205 0004 23F00303 		bic	r3, r3, #3
 206              	.LVL11:
 207:./Drivers/src/stm32f10x_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 208:./Drivers/src/stm32f10x_pwr.c ****   tmpreg |= PWR_Regulator;
 207              		.loc 1 208 3 is_stmt 1 view .LVU39
 208              		.loc 1 208 10 is_stmt 0 view .LVU40
 209 0008 0343     		orrs	r3, r3, r0
 210              	.LVL12:
 209:./Drivers/src/stm32f10x_pwr.c ****   /* Store the new value */
 210:./Drivers/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 211              		.loc 1 210 3 is_stmt 1 view .LVU41
 212              		.loc 1 210 11 is_stmt 0 view .LVU42
 213 000a 1360     		str	r3, [r2]
 211:./Drivers/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 212:./Drivers/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 214              		.loc 1 212 3 is_stmt 1 view .LVU43
 215              		.loc 1 212 6 is_stmt 0 view .LVU44
 216 000c 084A     		ldr	r2, .L19+4
 217 000e 1369     		ldr	r3, [r2, #16]
 218              	.LVL13:
 219              		.loc 1 212 12 view .LVU45
 220 0010 43F00403 		orr	r3, r3, #4
 221 0014 1361     		str	r3, [r2, #16]
 222              	.LVL14:
 213:./Drivers/src/stm32f10x_pwr.c ****   
 214:./Drivers/src/stm32f10x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 215:./Drivers/src/stm32f10x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 223              		.loc 1 215 3 is_stmt 1 view .LVU46
 224              		.loc 1 215 5 is_stmt 0 view .LVU47
 225 0016 0129     		cmp	r1, #1
 226 0018 06D0     		beq	.L18
 216:./Drivers/src/stm32f10x_pwr.c ****   {   
 217:./Drivers/src/stm32f10x_pwr.c ****     /* Request Wait For Interrupt */
 218:./Drivers/src/stm32f10x_pwr.c ****     __WFI();
 219:./Drivers/src/stm32f10x_pwr.c ****   }
 220:./Drivers/src/stm32f10x_pwr.c ****   else
 221:./Drivers/src/stm32f10x_pwr.c ****   {
 222:./Drivers/src/stm32f10x_pwr.c ****     /* Request Wait For Event */
 223:./Drivers/src/stm32f10x_pwr.c ****     __WFE();
 227              		.loc 1 223 5 is_stmt 1 view .LVU48
 228              	.LBB8:
 229              	.LBI8:
 230              		.file 2 "cmsis/core_cm3.h"
   1:cmsis/core_cm3.h **** /**************************************************************************//**
   2:cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:cmsis/core_cm3.h ****  * @version  V1.30
   5:cmsis/core_cm3.h ****  * @date     30. October 2009
   6:cmsis/core_cm3.h ****  *
   7:cmsis/core_cm3.h ****  * @note
   8:cmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:cmsis/core_cm3.h ****  *
  10:cmsis/core_cm3.h ****  * @par
  11:cmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:cmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:cmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccD4b4aw.s 			page 9


  15:cmsis/core_cm3.h ****  * @par
  16:cmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:cmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:cmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:cmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:cmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:cmsis/core_cm3.h ****  *
  22:cmsis/core_cm3.h ****  ******************************************************************************/
  23:cmsis/core_cm3.h **** 
  24:cmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:cmsis/core_cm3.h **** #define __CM3_CORE_H__
  26:cmsis/core_cm3.h **** 
  27:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:cmsis/core_cm3.h ****  *
  29:cmsis/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:cmsis/core_cm3.h ****  *   - Error 10: \n
  31:cmsis/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:cmsis/core_cm3.h ****  *     Error 10: Expecting ';'
  33:cmsis/core_cm3.h ****  * .
  34:cmsis/core_cm3.h ****  *   - Error 530: \n
  35:cmsis/core_cm3.h ****  *     return(__regBasePri); \n
  36:cmsis/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:cmsis/core_cm3.h ****  * . 
  38:cmsis/core_cm3.h ****  *   - Error 550: \n
  39:cmsis/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:cmsis/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:cmsis/core_cm3.h ****  * .
  42:cmsis/core_cm3.h ****  *   - Error 754: \n
  43:cmsis/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:cmsis/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:cmsis/core_cm3.h ****  * .
  46:cmsis/core_cm3.h ****  *   - Error 750: \n
  47:cmsis/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:cmsis/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:cmsis/core_cm3.h ****  * .
  50:cmsis/core_cm3.h ****  *   - Error 528: \n
  51:cmsis/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:cmsis/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:cmsis/core_cm3.h ****  * .
  54:cmsis/core_cm3.h ****  *   - Error 751: \n
  55:cmsis/core_cm3.h ****  *     } InterruptType_Type; \n
  56:cmsis/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:cmsis/core_cm3.h ****  * .
  58:cmsis/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:cmsis/core_cm3.h ****  *
  60:cmsis/core_cm3.h ****  */
  61:cmsis/core_cm3.h **** 
  62:cmsis/core_cm3.h **** /*lint -save */
  63:cmsis/core_cm3.h **** /*lint -e10  */
  64:cmsis/core_cm3.h **** /*lint -e530 */
  65:cmsis/core_cm3.h **** /*lint -e550 */
  66:cmsis/core_cm3.h **** /*lint -e754 */
  67:cmsis/core_cm3.h **** /*lint -e750 */
  68:cmsis/core_cm3.h **** /*lint -e528 */
  69:cmsis/core_cm3.h **** /*lint -e751 */
  70:cmsis/core_cm3.h **** 
  71:cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccD4b4aw.s 			page 10


  72:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:cmsis/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:cmsis/core_cm3.h ****     - CMSIS version number
  75:cmsis/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:cmsis/core_cm3.h ****     - Cortex-M core peripheral base address
  77:cmsis/core_cm3.h ****   @{
  78:cmsis/core_cm3.h ****  */
  79:cmsis/core_cm3.h **** 
  80:cmsis/core_cm3.h **** #ifdef __cplusplus
  81:cmsis/core_cm3.h ****  extern "C" {
  82:cmsis/core_cm3.h **** #endif 
  83:cmsis/core_cm3.h **** 
  84:cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:cmsis/core_cm3.h **** 
  88:cmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:cmsis/core_cm3.h **** 
  90:cmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:cmsis/core_cm3.h **** 
  92:cmsis/core_cm3.h **** #if defined (__ICCARM__)
  93:cmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:cmsis/core_cm3.h **** #endif
  95:cmsis/core_cm3.h **** 
  96:cmsis/core_cm3.h **** 
  97:cmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:cmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:cmsis/core_cm3.h **** #endif
 100:cmsis/core_cm3.h **** 
 101:cmsis/core_cm3.h **** 
 102:cmsis/core_cm3.h **** 
 103:cmsis/core_cm3.h **** 
 104:cmsis/core_cm3.h **** /**
 105:cmsis/core_cm3.h ****  * IO definitions
 106:cmsis/core_cm3.h ****  *
 107:cmsis/core_cm3.h ****  * define access restrictions to peripheral registers
 108:cmsis/core_cm3.h ****  */
 109:cmsis/core_cm3.h **** 
 110:cmsis/core_cm3.h **** #ifdef __cplusplus
 111:cmsis/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:cmsis/core_cm3.h **** #else
 113:cmsis/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:cmsis/core_cm3.h **** #endif
 115:cmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:cmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:cmsis/core_cm3.h **** 
 118:cmsis/core_cm3.h **** 
 119:cmsis/core_cm3.h **** 
 120:cmsis/core_cm3.h **** /*******************************************************************************
 121:cmsis/core_cm3.h ****  *                 Register Abstraction
 122:cmsis/core_cm3.h ****  ******************************************************************************/
 123:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:cmsis/core_cm3.h ****  @{
 125:cmsis/core_cm3.h **** */
 126:cmsis/core_cm3.h **** 
 127:cmsis/core_cm3.h **** 
 128:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
ARM GAS  /tmp/ccD4b4aw.s 			page 11


 129:cmsis/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:cmsis/core_cm3.h ****   @{
 131:cmsis/core_cm3.h ****  */
 132:cmsis/core_cm3.h **** typedef struct
 133:cmsis/core_cm3.h **** {
 134:cmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:cmsis/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:cmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:cmsis/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:cmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:cmsis/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:cmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:cmsis/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:cmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:cmsis/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:cmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:cmsis/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:cmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:cmsis/core_cm3.h **** }  NVIC_Type;                                               
 148:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:cmsis/core_cm3.h **** 
 150:cmsis/core_cm3.h **** 
 151:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:cmsis/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:cmsis/core_cm3.h ****   @{
 154:cmsis/core_cm3.h ****  */
 155:cmsis/core_cm3.h **** typedef struct
 156:cmsis/core_cm3.h **** {
 157:cmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:cmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:cmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:cmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:cmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:cmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:cmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:cmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:cmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:cmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:cmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:cmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:cmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:cmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:cmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:cmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:cmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:cmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:cmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:cmsis/core_cm3.h **** } SCB_Type;                                                
 177:cmsis/core_cm3.h **** 
 178:cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:cmsis/core_cm3.h **** 
 182:cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:cmsis/core_cm3.h **** 
 185:cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
ARM GAS  /tmp/ccD4b4aw.s 			page 12


 186:cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:cmsis/core_cm3.h **** 
 188:cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:cmsis/core_cm3.h **** 
 191:cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:cmsis/core_cm3.h **** 
 195:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:cmsis/core_cm3.h **** 
 198:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:cmsis/core_cm3.h **** 
 201:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:cmsis/core_cm3.h **** 
 204:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:cmsis/core_cm3.h **** 
 207:cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:cmsis/core_cm3.h **** 
 210:cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:cmsis/core_cm3.h **** 
 213:cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:cmsis/core_cm3.h **** 
 216:cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:cmsis/core_cm3.h **** 
 219:cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:cmsis/core_cm3.h **** 
 222:cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:cmsis/core_cm3.h **** 
 226:cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:cmsis/core_cm3.h **** 
 229:cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:cmsis/core_cm3.h **** 
 233:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:cmsis/core_cm3.h **** 
 236:cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:cmsis/core_cm3.h **** 
 239:cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:cmsis/core_cm3.h **** 
 242:cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
ARM GAS  /tmp/ccD4b4aw.s 			page 13


 243:cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:cmsis/core_cm3.h **** 
 245:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:cmsis/core_cm3.h **** 
 248:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:cmsis/core_cm3.h **** 
 251:cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 252:cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:cmsis/core_cm3.h **** 
 255:cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:cmsis/core_cm3.h **** 
 258:cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:cmsis/core_cm3.h **** 
 261:cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:cmsis/core_cm3.h **** 
 265:cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:cmsis/core_cm3.h **** 
 268:cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:cmsis/core_cm3.h **** 
 271:cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:cmsis/core_cm3.h **** 
 274:cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:cmsis/core_cm3.h **** 
 277:cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:cmsis/core_cm3.h **** 
 280:cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:cmsis/core_cm3.h **** 
 284:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:cmsis/core_cm3.h **** 
 287:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:cmsis/core_cm3.h **** 
 290:cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:cmsis/core_cm3.h **** 
 293:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:cmsis/core_cm3.h **** 
 296:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:cmsis/core_cm3.h **** 
 299:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
ARM GAS  /tmp/ccD4b4aw.s 			page 14


 300:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:cmsis/core_cm3.h **** 
 302:cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:cmsis/core_cm3.h **** 
 305:cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:cmsis/core_cm3.h **** 
 308:cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:cmsis/core_cm3.h **** 
 311:cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:cmsis/core_cm3.h ****                                      
 314:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:cmsis/core_cm3.h **** 
 317:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:cmsis/core_cm3.h **** 
 320:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:cmsis/core_cm3.h **** 
 323:cmsis/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:cmsis/core_cm3.h **** 
 327:cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:cmsis/core_cm3.h **** 
 330:cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:cmsis/core_cm3.h **** 
 333:cmsis/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:cmsis/core_cm3.h **** 
 337:cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:cmsis/core_cm3.h **** 
 340:cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:cmsis/core_cm3.h **** 
 343:cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:cmsis/core_cm3.h **** 
 347:cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:cmsis/core_cm3.h **** 
 350:cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:cmsis/core_cm3.h **** 
 353:cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:cmsis/core_cm3.h **** 
 356:cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
ARM GAS  /tmp/ccD4b4aw.s 			page 15


 357:cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:cmsis/core_cm3.h **** 
 360:cmsis/core_cm3.h **** 
 361:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:cmsis/core_cm3.h ****   memory mapped structure for SysTick
 363:cmsis/core_cm3.h ****   @{
 364:cmsis/core_cm3.h ****  */
 365:cmsis/core_cm3.h **** typedef struct
 366:cmsis/core_cm3.h **** {
 367:cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:cmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:cmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:cmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:cmsis/core_cm3.h **** } SysTick_Type;
 372:cmsis/core_cm3.h **** 
 373:cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:cmsis/core_cm3.h **** 
 377:cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:cmsis/core_cm3.h **** 
 380:cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:cmsis/core_cm3.h **** 
 383:cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:cmsis/core_cm3.h **** 
 386:cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:cmsis/core_cm3.h **** 
 390:cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 391:cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:cmsis/core_cm3.h **** 
 394:cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:cmsis/core_cm3.h **** 
 398:cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:cmsis/core_cm3.h **** 
 401:cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:cmsis/core_cm3.h **** 
 405:cmsis/core_cm3.h **** 
 406:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:cmsis/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:cmsis/core_cm3.h ****   @{
 409:cmsis/core_cm3.h ****  */
 410:cmsis/core_cm3.h **** typedef struct
 411:cmsis/core_cm3.h **** {
 412:cmsis/core_cm3.h ****   __O  union  
 413:cmsis/core_cm3.h ****   {
ARM GAS  /tmp/ccD4b4aw.s 			page 16


 414:cmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:cmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:cmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:cmsis/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:cmsis/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:cmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:cmsis/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:cmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:cmsis/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:cmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:cmsis/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:cmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:cmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:cmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:cmsis/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:cmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:cmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:cmsis/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:cmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:cmsis/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:cmsis/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:cmsis/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:cmsis/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:cmsis/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:cmsis/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:cmsis/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:cmsis/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:cmsis/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:cmsis/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:cmsis/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:cmsis/core_cm3.h **** } ITM_Type;                                                
 445:cmsis/core_cm3.h **** 
 446:cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:cmsis/core_cm3.h **** 
 450:cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:cmsis/core_cm3.h **** 
 454:cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:cmsis/core_cm3.h **** 
 457:cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:cmsis/core_cm3.h **** 
 460:cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:cmsis/core_cm3.h **** 
 463:cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:cmsis/core_cm3.h **** 
 466:cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:cmsis/core_cm3.h **** 
 469:cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
ARM GAS  /tmp/ccD4b4aw.s 			page 17


 471:cmsis/core_cm3.h **** 
 472:cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:cmsis/core_cm3.h **** 
 475:cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:cmsis/core_cm3.h **** 
 479:cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:cmsis/core_cm3.h **** 
 483:cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:cmsis/core_cm3.h **** 
 487:cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:cmsis/core_cm3.h **** 
 491:cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:cmsis/core_cm3.h **** 
 494:cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:cmsis/core_cm3.h **** 
 498:cmsis/core_cm3.h **** 
 499:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:cmsis/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:cmsis/core_cm3.h ****   @{
 502:cmsis/core_cm3.h ****  */
 503:cmsis/core_cm3.h **** typedef struct
 504:cmsis/core_cm3.h **** {
 505:cmsis/core_cm3.h ****        uint32_t RESERVED0;
 506:cmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:cmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:cmsis/core_cm3.h **** #else
 510:cmsis/core_cm3.h ****        uint32_t RESERVED1;
 511:cmsis/core_cm3.h **** #endif
 512:cmsis/core_cm3.h **** } InterruptType_Type;
 513:cmsis/core_cm3.h **** 
 514:cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:cmsis/core_cm3.h **** 
 518:cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:cmsis/core_cm3.h **** 
 522:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:cmsis/core_cm3.h **** 
 525:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
ARM GAS  /tmp/ccD4b4aw.s 			page 18


 528:cmsis/core_cm3.h **** 
 529:cmsis/core_cm3.h **** 
 530:cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:cmsis/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:cmsis/core_cm3.h ****   @{
 534:cmsis/core_cm3.h ****  */
 535:cmsis/core_cm3.h **** typedef struct
 536:cmsis/core_cm3.h **** {
 537:cmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:cmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:cmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:cmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:cmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:cmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:cmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:cmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:cmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:cmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:cmsis/core_cm3.h **** } MPU_Type;                                                
 549:cmsis/core_cm3.h **** 
 550:cmsis/core_cm3.h **** /* MPU Type Register */
 551:cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:cmsis/core_cm3.h **** 
 554:cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:cmsis/core_cm3.h **** 
 557:cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:cmsis/core_cm3.h **** 
 560:cmsis/core_cm3.h **** /* MPU Control Register */
 561:cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:cmsis/core_cm3.h **** 
 564:cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:cmsis/core_cm3.h **** 
 567:cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:cmsis/core_cm3.h **** 
 570:cmsis/core_cm3.h **** /* MPU Region Number Register */
 571:cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:cmsis/core_cm3.h **** 
 574:cmsis/core_cm3.h **** /* MPU Region Base Address Register */
 575:cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:cmsis/core_cm3.h **** 
 578:cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:cmsis/core_cm3.h **** 
 581:cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:cmsis/core_cm3.h **** 
 584:cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register */
ARM GAS  /tmp/ccD4b4aw.s 			page 19


 585:cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:cmsis/core_cm3.h **** 
 588:cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:cmsis/core_cm3.h **** 
 591:cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:cmsis/core_cm3.h **** 
 594:cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:cmsis/core_cm3.h **** 
 597:cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:cmsis/core_cm3.h **** 
 600:cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:cmsis/core_cm3.h **** 
 603:cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:cmsis/core_cm3.h **** 
 606:cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:cmsis/core_cm3.h **** 
 609:cmsis/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:cmsis/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:cmsis/core_cm3.h **** 
 612:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:cmsis/core_cm3.h **** #endif
 614:cmsis/core_cm3.h **** 
 615:cmsis/core_cm3.h **** 
 616:cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:cmsis/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:cmsis/core_cm3.h ****   @{
 619:cmsis/core_cm3.h ****  */
 620:cmsis/core_cm3.h **** typedef struct
 621:cmsis/core_cm3.h **** {
 622:cmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:cmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:cmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:cmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:cmsis/core_cm3.h **** } CoreDebug_Type;
 627:cmsis/core_cm3.h **** 
 628:cmsis/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:cmsis/core_cm3.h **** 
 632:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:cmsis/core_cm3.h **** 
 635:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:cmsis/core_cm3.h **** 
 638:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:cmsis/core_cm3.h **** 
 641:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
ARM GAS  /tmp/ccD4b4aw.s 			page 20


 642:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:cmsis/core_cm3.h **** 
 644:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:cmsis/core_cm3.h **** 
 647:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:cmsis/core_cm3.h **** 
 650:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:cmsis/core_cm3.h **** 
 653:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:cmsis/core_cm3.h **** 
 656:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:cmsis/core_cm3.h **** 
 659:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:cmsis/core_cm3.h **** 
 662:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:cmsis/core_cm3.h **** 
 665:cmsis/core_cm3.h **** /* Debug Core Register Selector Register */
 666:cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:cmsis/core_cm3.h **** 
 669:cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:cmsis/core_cm3.h **** 
 672:cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:cmsis/core_cm3.h **** 
 676:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:cmsis/core_cm3.h **** 
 679:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:cmsis/core_cm3.h **** 
 682:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:cmsis/core_cm3.h **** 
 685:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:cmsis/core_cm3.h **** 
 688:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:cmsis/core_cm3.h **** 
 691:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:cmsis/core_cm3.h **** 
 694:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:cmsis/core_cm3.h **** 
 697:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
ARM GAS  /tmp/ccD4b4aw.s 			page 21


 699:cmsis/core_cm3.h **** 
 700:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:cmsis/core_cm3.h **** 
 703:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:cmsis/core_cm3.h **** 
 706:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:cmsis/core_cm3.h **** 
 709:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:cmsis/core_cm3.h **** 
 713:cmsis/core_cm3.h **** 
 714:cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:cmsis/core_cm3.h **** 
 722:cmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:cmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:cmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:cmsis/core_cm3.h **** 
 729:cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:cmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:cmsis/core_cm3.h **** #endif
 733:cmsis/core_cm3.h **** 
 734:cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:cmsis/core_cm3.h **** 
 736:cmsis/core_cm3.h **** 
 737:cmsis/core_cm3.h **** /*******************************************************************************
 738:cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 739:cmsis/core_cm3.h ****  ******************************************************************************/
 740:cmsis/core_cm3.h **** 
 741:cmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 742:cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:cmsis/core_cm3.h **** 
 745:cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:cmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:cmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:cmsis/core_cm3.h **** 
 749:cmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:cmsis/core_cm3.h **** 
 753:cmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
ARM GAS  /tmp/ccD4b4aw.s 			page 22


 756:cmsis/core_cm3.h **** 
 757:cmsis/core_cm3.h **** #endif
 758:cmsis/core_cm3.h **** 
 759:cmsis/core_cm3.h **** 
 760:cmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:cmsis/core_cm3.h **** 
 762:cmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:cmsis/core_cm3.h **** /* ARM armcc specific functions */
 764:cmsis/core_cm3.h **** 
 765:cmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:cmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:cmsis/core_cm3.h **** 
 768:cmsis/core_cm3.h **** #define __NOP                             __nop
 769:cmsis/core_cm3.h **** #define __WFI                             __wfi
 770:cmsis/core_cm3.h **** #define __WFE                             __wfe
 771:cmsis/core_cm3.h **** #define __SEV                             __sev
 772:cmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 773:cmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:cmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:cmsis/core_cm3.h **** #define __REV                             __rev
 776:cmsis/core_cm3.h **** #define __RBIT                            __rbit
 777:cmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:cmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:cmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:cmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:cmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:cmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:cmsis/core_cm3.h **** 
 784:cmsis/core_cm3.h **** 
 785:cmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:cmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:cmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:cmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:cmsis/core_cm3.h **** 
 790:cmsis/core_cm3.h **** 
 791:cmsis/core_cm3.h **** /**
 792:cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:cmsis/core_cm3.h ****  *
 794:cmsis/core_cm3.h ****  * @return ProcessStackPointer
 795:cmsis/core_cm3.h ****  *
 796:cmsis/core_cm3.h ****  * Return the actual process stack pointer
 797:cmsis/core_cm3.h ****  */
 798:cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:cmsis/core_cm3.h **** 
 800:cmsis/core_cm3.h **** /**
 801:cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:cmsis/core_cm3.h ****  *
 803:cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:cmsis/core_cm3.h ****  *
 805:cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:cmsis/core_cm3.h ****  */
 808:cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:cmsis/core_cm3.h **** 
 810:cmsis/core_cm3.h **** /**
 811:cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccD4b4aw.s 			page 23


 813:cmsis/core_cm3.h ****  * @return Main Stack Pointer
 814:cmsis/core_cm3.h ****  *
 815:cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:cmsis/core_cm3.h ****  * Cortex processor register
 817:cmsis/core_cm3.h ****  */
 818:cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:cmsis/core_cm3.h **** 
 820:cmsis/core_cm3.h **** /**
 821:cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:cmsis/core_cm3.h ****  *
 823:cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:cmsis/core_cm3.h ****  *
 825:cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:cmsis/core_cm3.h ****  */
 828:cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:cmsis/core_cm3.h **** 
 830:cmsis/core_cm3.h **** /**
 831:cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:cmsis/core_cm3.h ****  *
 833:cmsis/core_cm3.h ****  * @param   value  value to reverse
 834:cmsis/core_cm3.h ****  * @return         reversed value
 835:cmsis/core_cm3.h ****  *
 836:cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:cmsis/core_cm3.h ****  */
 838:cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:cmsis/core_cm3.h **** 
 840:cmsis/core_cm3.h **** /**
 841:cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:cmsis/core_cm3.h ****  *
 843:cmsis/core_cm3.h ****  * @param   value  value to reverse
 844:cmsis/core_cm3.h ****  * @return         reversed value
 845:cmsis/core_cm3.h ****  *
 846:cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:cmsis/core_cm3.h ****  */
 848:cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:cmsis/core_cm3.h **** 
 850:cmsis/core_cm3.h **** 
 851:cmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:cmsis/core_cm3.h **** 
 853:cmsis/core_cm3.h **** /**
 854:cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:cmsis/core_cm3.h ****  *
 856:cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:cmsis/core_cm3.h ****  */
 858:cmsis/core_cm3.h **** extern void __CLREX(void);
 859:cmsis/core_cm3.h **** 
 860:cmsis/core_cm3.h **** /**
 861:cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 862:cmsis/core_cm3.h ****  *
 863:cmsis/core_cm3.h ****  * @return BasePriority
 864:cmsis/core_cm3.h ****  *
 865:cmsis/core_cm3.h ****  * Return the content of the base priority register
 866:cmsis/core_cm3.h ****  */
 867:cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:cmsis/core_cm3.h **** 
 869:cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccD4b4aw.s 			page 24


 870:cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 871:cmsis/core_cm3.h ****  *
 872:cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 873:cmsis/core_cm3.h ****  *
 874:cmsis/core_cm3.h ****  * Set the base priority register
 875:cmsis/core_cm3.h ****  */
 876:cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:cmsis/core_cm3.h **** 
 878:cmsis/core_cm3.h **** /**
 879:cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:cmsis/core_cm3.h ****  *
 881:cmsis/core_cm3.h ****  * @return PriMask
 882:cmsis/core_cm3.h ****  *
 883:cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:cmsis/core_cm3.h ****  */
 885:cmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:cmsis/core_cm3.h **** 
 887:cmsis/core_cm3.h **** /**
 888:cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:cmsis/core_cm3.h ****  *
 890:cmsis/core_cm3.h ****  * @param   priMask  PriMask
 891:cmsis/core_cm3.h ****  *
 892:cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:cmsis/core_cm3.h ****  */
 894:cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:cmsis/core_cm3.h **** 
 896:cmsis/core_cm3.h **** /**
 897:cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:cmsis/core_cm3.h ****  *
 899:cmsis/core_cm3.h ****  * @return FaultMask
 900:cmsis/core_cm3.h ****  *
 901:cmsis/core_cm3.h ****  * Return the content of the fault mask register
 902:cmsis/core_cm3.h ****  */
 903:cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:cmsis/core_cm3.h **** 
 905:cmsis/core_cm3.h **** /**
 906:cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:cmsis/core_cm3.h ****  *
 908:cmsis/core_cm3.h ****  * @param  faultMask faultMask value
 909:cmsis/core_cm3.h ****  *
 910:cmsis/core_cm3.h ****  * Set the fault mask register
 911:cmsis/core_cm3.h ****  */
 912:cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:cmsis/core_cm3.h **** 
 914:cmsis/core_cm3.h **** /**
 915:cmsis/core_cm3.h ****  * @brief  Return the Control Register value
 916:cmsis/core_cm3.h ****  * 
 917:cmsis/core_cm3.h ****  * @return Control value
 918:cmsis/core_cm3.h ****  *
 919:cmsis/core_cm3.h ****  * Return the content of the control register
 920:cmsis/core_cm3.h ****  */
 921:cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:cmsis/core_cm3.h **** 
 923:cmsis/core_cm3.h **** /**
 924:cmsis/core_cm3.h ****  * @brief  Set the Control Register value
 925:cmsis/core_cm3.h ****  *
 926:cmsis/core_cm3.h ****  * @param  control  Control value
ARM GAS  /tmp/ccD4b4aw.s 			page 25


 927:cmsis/core_cm3.h ****  *
 928:cmsis/core_cm3.h ****  * Set the control register
 929:cmsis/core_cm3.h ****  */
 930:cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:cmsis/core_cm3.h **** 
 932:cmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:cmsis/core_cm3.h **** 
 934:cmsis/core_cm3.h **** /**
 935:cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:cmsis/core_cm3.h ****  *
 937:cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:cmsis/core_cm3.h ****  */
 939:cmsis/core_cm3.h **** #define __CLREX                           __clrex
 940:cmsis/core_cm3.h **** 
 941:cmsis/core_cm3.h **** /**
 942:cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 943:cmsis/core_cm3.h ****  *
 944:cmsis/core_cm3.h ****  * @return BasePriority
 945:cmsis/core_cm3.h ****  *
 946:cmsis/core_cm3.h ****  * Return the content of the base priority register
 947:cmsis/core_cm3.h ****  */
 948:cmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:cmsis/core_cm3.h **** {
 950:cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:cmsis/core_cm3.h ****   return(__regBasePri);
 952:cmsis/core_cm3.h **** }
 953:cmsis/core_cm3.h **** 
 954:cmsis/core_cm3.h **** /**
 955:cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 956:cmsis/core_cm3.h ****  *
 957:cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 958:cmsis/core_cm3.h ****  *
 959:cmsis/core_cm3.h ****  * Set the base priority register
 960:cmsis/core_cm3.h ****  */
 961:cmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:cmsis/core_cm3.h **** {
 963:cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:cmsis/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:cmsis/core_cm3.h **** }
 966:cmsis/core_cm3.h **** 
 967:cmsis/core_cm3.h **** /**
 968:cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:cmsis/core_cm3.h ****  *
 970:cmsis/core_cm3.h ****  * @return PriMask
 971:cmsis/core_cm3.h ****  *
 972:cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:cmsis/core_cm3.h ****  */
 974:cmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:cmsis/core_cm3.h **** {
 976:cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:cmsis/core_cm3.h ****   return(__regPriMask);
 978:cmsis/core_cm3.h **** }
 979:cmsis/core_cm3.h **** 
 980:cmsis/core_cm3.h **** /**
 981:cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:cmsis/core_cm3.h ****  *
 983:cmsis/core_cm3.h ****  * @param  priMask  PriMask
ARM GAS  /tmp/ccD4b4aw.s 			page 26


 984:cmsis/core_cm3.h ****  *
 985:cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:cmsis/core_cm3.h ****  */
 987:cmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:cmsis/core_cm3.h **** {
 989:cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:cmsis/core_cm3.h ****   __regPriMask = (priMask);
 991:cmsis/core_cm3.h **** }
 992:cmsis/core_cm3.h **** 
 993:cmsis/core_cm3.h **** /**
 994:cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:cmsis/core_cm3.h ****  *
 996:cmsis/core_cm3.h ****  * @return FaultMask
 997:cmsis/core_cm3.h ****  *
 998:cmsis/core_cm3.h ****  * Return the content of the fault mask register
 999:cmsis/core_cm3.h ****  */
1000:cmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:cmsis/core_cm3.h **** {
1002:cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:cmsis/core_cm3.h ****   return(__regFaultMask);
1004:cmsis/core_cm3.h **** }
1005:cmsis/core_cm3.h **** 
1006:cmsis/core_cm3.h **** /**
1007:cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:cmsis/core_cm3.h ****  *
1009:cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1010:cmsis/core_cm3.h ****  *
1011:cmsis/core_cm3.h ****  * Set the fault mask register
1012:cmsis/core_cm3.h ****  */
1013:cmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:cmsis/core_cm3.h **** {
1015:cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:cmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:cmsis/core_cm3.h **** }
1018:cmsis/core_cm3.h **** 
1019:cmsis/core_cm3.h **** /**
1020:cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1021:cmsis/core_cm3.h ****  * 
1022:cmsis/core_cm3.h ****  * @return Control value
1023:cmsis/core_cm3.h ****  *
1024:cmsis/core_cm3.h ****  * Return the content of the control register
1025:cmsis/core_cm3.h ****  */
1026:cmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:cmsis/core_cm3.h **** {
1028:cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:cmsis/core_cm3.h ****   return(__regControl);
1030:cmsis/core_cm3.h **** }
1031:cmsis/core_cm3.h **** 
1032:cmsis/core_cm3.h **** /**
1033:cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1034:cmsis/core_cm3.h ****  *
1035:cmsis/core_cm3.h ****  * @param  control  Control value
1036:cmsis/core_cm3.h ****  *
1037:cmsis/core_cm3.h ****  * Set the control register
1038:cmsis/core_cm3.h ****  */
1039:cmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:cmsis/core_cm3.h **** {
ARM GAS  /tmp/ccD4b4aw.s 			page 27


1041:cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:cmsis/core_cm3.h ****   __regControl = control;
1043:cmsis/core_cm3.h **** }
1044:cmsis/core_cm3.h **** 
1045:cmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:cmsis/core_cm3.h **** 
1047:cmsis/core_cm3.h **** 
1048:cmsis/core_cm3.h **** 
1049:cmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:cmsis/core_cm3.h **** /* IAR iccarm specific functions */
1051:cmsis/core_cm3.h **** 
1052:cmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:cmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:cmsis/core_cm3.h **** 
1055:cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:cmsis/core_cm3.h **** 
1058:cmsis/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:cmsis/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:cmsis/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:cmsis/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:cmsis/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:cmsis/core_cm3.h **** 
1064:cmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:cmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:cmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:cmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:cmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:cmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:cmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:cmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:cmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:cmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:cmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:cmsis/core_cm3.h **** 
1076:cmsis/core_cm3.h **** 
1077:cmsis/core_cm3.h **** /**
1078:cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:cmsis/core_cm3.h ****  *
1080:cmsis/core_cm3.h ****  * @return ProcessStackPointer
1081:cmsis/core_cm3.h ****  *
1082:cmsis/core_cm3.h ****  * Return the actual process stack pointer
1083:cmsis/core_cm3.h ****  */
1084:cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:cmsis/core_cm3.h **** 
1086:cmsis/core_cm3.h **** /**
1087:cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:cmsis/core_cm3.h ****  *
1089:cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:cmsis/core_cm3.h ****  *
1091:cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:cmsis/core_cm3.h ****  */
1094:cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:cmsis/core_cm3.h **** 
1096:cmsis/core_cm3.h **** /**
1097:cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
ARM GAS  /tmp/ccD4b4aw.s 			page 28


1098:cmsis/core_cm3.h ****  *
1099:cmsis/core_cm3.h ****  * @return Main Stack Pointer
1100:cmsis/core_cm3.h ****  *
1101:cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:cmsis/core_cm3.h ****  * Cortex processor register
1103:cmsis/core_cm3.h ****  */
1104:cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:cmsis/core_cm3.h **** 
1106:cmsis/core_cm3.h **** /**
1107:cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:cmsis/core_cm3.h ****  *
1109:cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:cmsis/core_cm3.h ****  *
1111:cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:cmsis/core_cm3.h ****  */
1114:cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:cmsis/core_cm3.h **** 
1116:cmsis/core_cm3.h **** /**
1117:cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:cmsis/core_cm3.h ****  *
1119:cmsis/core_cm3.h ****  * @param  value  value to reverse
1120:cmsis/core_cm3.h ****  * @return        reversed value
1121:cmsis/core_cm3.h ****  *
1122:cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:cmsis/core_cm3.h ****  */
1124:cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:cmsis/core_cm3.h **** 
1126:cmsis/core_cm3.h **** /**
1127:cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1128:cmsis/core_cm3.h ****  *
1129:cmsis/core_cm3.h ****  * @param  value  value to reverse
1130:cmsis/core_cm3.h ****  * @return        reversed value
1131:cmsis/core_cm3.h ****  *
1132:cmsis/core_cm3.h ****  * Reverse bit order of value
1133:cmsis/core_cm3.h ****  */
1134:cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:cmsis/core_cm3.h **** 
1136:cmsis/core_cm3.h **** /**
1137:cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:cmsis/core_cm3.h ****  *
1139:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1140:cmsis/core_cm3.h ****  * @return        value of (*address)
1141:cmsis/core_cm3.h ****  *
1142:cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:cmsis/core_cm3.h ****  */
1144:cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:cmsis/core_cm3.h **** 
1146:cmsis/core_cm3.h **** /**
1147:cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:cmsis/core_cm3.h ****  *
1149:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1150:cmsis/core_cm3.h ****  * @return        value of (*address)
1151:cmsis/core_cm3.h ****  *
1152:cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:cmsis/core_cm3.h ****  */
1154:cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
ARM GAS  /tmp/ccD4b4aw.s 			page 29


1155:cmsis/core_cm3.h **** 
1156:cmsis/core_cm3.h **** /**
1157:cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:cmsis/core_cm3.h ****  *
1159:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1160:cmsis/core_cm3.h ****  * @return        value of (*address)
1161:cmsis/core_cm3.h ****  *
1162:cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:cmsis/core_cm3.h ****  */
1164:cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:cmsis/core_cm3.h **** 
1166:cmsis/core_cm3.h **** /**
1167:cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:cmsis/core_cm3.h ****  *
1169:cmsis/core_cm3.h ****  * @param  value  value to store
1170:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1171:cmsis/core_cm3.h ****  * @return        successful / failed
1172:cmsis/core_cm3.h ****  *
1173:cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:cmsis/core_cm3.h ****  */
1175:cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:cmsis/core_cm3.h **** 
1177:cmsis/core_cm3.h **** /**
1178:cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:cmsis/core_cm3.h ****  *
1180:cmsis/core_cm3.h ****  * @param  value  value to store
1181:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1182:cmsis/core_cm3.h ****  * @return        successful / failed
1183:cmsis/core_cm3.h ****  *
1184:cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:cmsis/core_cm3.h ****  */
1186:cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:cmsis/core_cm3.h **** 
1188:cmsis/core_cm3.h **** /**
1189:cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:cmsis/core_cm3.h ****  *
1191:cmsis/core_cm3.h ****  * @param  value  value to store
1192:cmsis/core_cm3.h ****  * @param  *addr  address pointer
1193:cmsis/core_cm3.h ****  * @return        successful / failed
1194:cmsis/core_cm3.h ****  *
1195:cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:cmsis/core_cm3.h ****  */
1197:cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:cmsis/core_cm3.h **** 
1199:cmsis/core_cm3.h **** 
1200:cmsis/core_cm3.h **** 
1201:cmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:cmsis/core_cm3.h **** /* GNU gcc specific functions */
1203:cmsis/core_cm3.h **** 
1204:cmsis/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:cmsis/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:cmsis/core_cm3.h **** 
1207:cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:cmsis/core_cm3.h **** 
1210:cmsis/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:cmsis/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
ARM GAS  /tmp/ccD4b4aw.s 			page 30


1212:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 231              		.loc 2 1212 22 view .LVU49
 232              	.LBB9:
 233              		.loc 2 1212 53 view .LVU50
 234              		.syntax unified
 235              	@ 1212 "cmsis/core_cm3.h" 1
 236 001a 20BF     		wfe
 237              	@ 0 "" 2
 238              		.thumb
 239              		.syntax unified
 240              	.L17:
 241              	.LBE9:
 242              	.LBE8:
 224:./Drivers/src/stm32f10x_pwr.c ****   }
 225:./Drivers/src/stm32f10x_pwr.c ****   
 226:./Drivers/src/stm32f10x_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 227:./Drivers/src/stm32f10x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 243              		.loc 1 227 3 view .LVU51
 244              		.loc 1 227 6 is_stmt 0 view .LVU52
 245 001c 044A     		ldr	r2, .L19+4
 246 001e 1369     		ldr	r3, [r2, #16]
 247              		.loc 1 227 12 view .LVU53
 248 0020 23F00403 		bic	r3, r3, #4
 249 0024 1361     		str	r3, [r2, #16]
 228:./Drivers/src/stm32f10x_pwr.c **** }
 250              		.loc 1 228 1 view .LVU54
 251 0026 7047     		bx	lr
 252              	.L18:
 218:./Drivers/src/stm32f10x_pwr.c ****   }
 253              		.loc 1 218 5 is_stmt 1 view .LVU55
 254              	.LBB10:
 255              	.LBI10:
1211:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 256              		.loc 2 1211 22 view .LVU56
 257              	.LBB11:
1211:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 258              		.loc 2 1211 53 view .LVU57
 259              		.syntax unified
 260              	@ 1211 "cmsis/core_cm3.h" 1
 261 0028 30BF     		wfi
 262              	@ 0 "" 2
1211:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 263              		.loc 2 1211 77 is_stmt 0 view .LVU58
 264              		.thumb
 265              		.syntax unified
 266 002a F7E7     		b	.L17
 267              	.L20:
 268              		.align	2
 269              	.L19:
 270 002c 00700040 		.word	1073770496
 271 0030 00ED00E0 		.word	-536810240
 272              	.LBE11:
 273              	.LBE10:
 274              		.cfi_endproc
 275              	.LFE34:
 277              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 278              		.align	1
ARM GAS  /tmp/ccD4b4aw.s 			page 31


 279              		.global	PWR_EnterSTANDBYMode
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 284              	PWR_EnterSTANDBYMode:
 285              	.LFB35:
 229:./Drivers/src/stm32f10x_pwr.c **** 
 230:./Drivers/src/stm32f10x_pwr.c **** /**
 231:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Enters STANDBY mode.
 232:./Drivers/src/stm32f10x_pwr.c ****   * @note   The Wakeup flag (WUF) need to be cleared at application level before to call this funct
 233:./Drivers/src/stm32f10x_pwr.c ****   * @param  None
 234:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 235:./Drivers/src/stm32f10x_pwr.c ****   */
 236:./Drivers/src/stm32f10x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 237:./Drivers/src/stm32f10x_pwr.c **** {
 286              		.loc 1 237 1 is_stmt 1 view -0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              		@ link register save eliminated.
 238:./Drivers/src/stm32f10x_pwr.c ****   /* Select STANDBY mode */
 239:./Drivers/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 291              		.loc 1 239 3 view .LVU60
 292              		.loc 1 239 6 is_stmt 0 view .LVU61
 293 0000 054A     		ldr	r2, .L22
 294 0002 1368     		ldr	r3, [r2]
 295              		.loc 1 239 11 view .LVU62
 296 0004 43F00203 		orr	r3, r3, #2
 297 0008 1360     		str	r3, [r2]
 240:./Drivers/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 241:./Drivers/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 298              		.loc 1 241 3 is_stmt 1 view .LVU63
 299              		.loc 1 241 6 is_stmt 0 view .LVU64
 300 000a 044A     		ldr	r2, .L22+4
 301 000c 1369     		ldr	r3, [r2, #16]
 302              		.loc 1 241 12 view .LVU65
 303 000e 43F00403 		orr	r3, r3, #4
 304 0012 1361     		str	r3, [r2, #16]
 242:./Drivers/src/stm32f10x_pwr.c **** /* This option is used to ensure that store operations are completed */
 243:./Drivers/src/stm32f10x_pwr.c **** #if defined ( __CC_ARM   )
 244:./Drivers/src/stm32f10x_pwr.c ****   __force_stores();
 245:./Drivers/src/stm32f10x_pwr.c **** #endif
 246:./Drivers/src/stm32f10x_pwr.c ****   /* Request Wait For Interrupt */
 247:./Drivers/src/stm32f10x_pwr.c ****   __WFI();
 305              		.loc 1 247 3 is_stmt 1 view .LVU66
 306              	.LBB12:
 307              	.LBI12:
1211:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 308              		.loc 2 1211 22 view .LVU67
 309              	.LBB13:
1211:cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 310              		.loc 2 1211 53 view .LVU68
 311              		.syntax unified
 312              	@ 1211 "cmsis/core_cm3.h" 1
 313 0014 30BF     		wfi
 314              	@ 0 "" 2
 315              		.thumb
ARM GAS  /tmp/ccD4b4aw.s 			page 32


 316              		.syntax unified
 317              	.LBE13:
 318              	.LBE12:
 248:./Drivers/src/stm32f10x_pwr.c **** }
 319              		.loc 1 248 1 is_stmt 0 view .LVU69
 320 0016 7047     		bx	lr
 321              	.L23:
 322              		.align	2
 323              	.L22:
 324 0018 00700040 		.word	1073770496
 325 001c 00ED00E0 		.word	-536810240
 326              		.cfi_endproc
 327              	.LFE35:
 329              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 330              		.align	1
 331              		.global	PWR_GetFlagStatus
 332              		.syntax unified
 333              		.thumb
 334              		.thumb_func
 336              	PWR_GetFlagStatus:
 337              	.LVL15:
 338              	.LFB36:
 249:./Drivers/src/stm32f10x_pwr.c **** 
 250:./Drivers/src/stm32f10x_pwr.c **** /**
 251:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 252:./Drivers/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 253:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 254:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 255:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 256:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_PVDO: PVD Output
 257:./Drivers/src/stm32f10x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 258:./Drivers/src/stm32f10x_pwr.c ****   */
 259:./Drivers/src/stm32f10x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 260:./Drivers/src/stm32f10x_pwr.c **** {
 339              		.loc 1 260 1 is_stmt 1 view -0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 261:./Drivers/src/stm32f10x_pwr.c ****   FlagStatus bitstatus = RESET;
 344              		.loc 1 261 3 view .LVU71
 262:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 263:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 345              		.loc 1 263 3 view .LVU72
 264:./Drivers/src/stm32f10x_pwr.c ****   
 265:./Drivers/src/stm32f10x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 346              		.loc 1 265 3 view .LVU73
 347              		.loc 1 265 11 is_stmt 0 view .LVU74
 348 0000 034B     		ldr	r3, .L27
 349 0002 5B68     		ldr	r3, [r3, #4]
 350              		.loc 1 265 6 view .LVU75
 351 0004 0342     		tst	r3, r0
 352 0006 01D0     		beq	.L26
 266:./Drivers/src/stm32f10x_pwr.c ****   {
 267:./Drivers/src/stm32f10x_pwr.c ****     bitstatus = SET;
 353              		.loc 1 267 15 view .LVU76
 354 0008 0120     		movs	r0, #1
ARM GAS  /tmp/ccD4b4aw.s 			page 33


 355              	.LVL16:
 356              		.loc 1 267 15 view .LVU77
 357 000a 7047     		bx	lr
 358              	.LVL17:
 359              	.L26:
 268:./Drivers/src/stm32f10x_pwr.c ****   }
 269:./Drivers/src/stm32f10x_pwr.c ****   else
 270:./Drivers/src/stm32f10x_pwr.c ****   {
 271:./Drivers/src/stm32f10x_pwr.c ****     bitstatus = RESET;
 360              		.loc 1 271 15 view .LVU78
 361 000c 0020     		movs	r0, #0
 362              	.LVL18:
 272:./Drivers/src/stm32f10x_pwr.c ****   }
 273:./Drivers/src/stm32f10x_pwr.c ****   /* Return the flag status */
 274:./Drivers/src/stm32f10x_pwr.c ****   return bitstatus;
 363              		.loc 1 274 3 is_stmt 1 view .LVU79
 275:./Drivers/src/stm32f10x_pwr.c **** }
 364              		.loc 1 275 1 is_stmt 0 view .LVU80
 365 000e 7047     		bx	lr
 366              	.L28:
 367              		.align	2
 368              	.L27:
 369 0010 00700040 		.word	1073770496
 370              		.cfi_endproc
 371              	.LFE36:
 373              		.section	.text.PWR_ClearFlag,"ax",%progbits
 374              		.align	1
 375              		.global	PWR_ClearFlag
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 380              	PWR_ClearFlag:
 381              	.LVL19:
 382              	.LFB37:
 276:./Drivers/src/stm32f10x_pwr.c **** 
 277:./Drivers/src/stm32f10x_pwr.c **** /**
 278:./Drivers/src/stm32f10x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 279:./Drivers/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 280:./Drivers/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 281:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 282:./Drivers/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 283:./Drivers/src/stm32f10x_pwr.c ****   * @retval None
 284:./Drivers/src/stm32f10x_pwr.c ****   */
 285:./Drivers/src/stm32f10x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 286:./Drivers/src/stm32f10x_pwr.c **** {
 383              		.loc 1 286 1 is_stmt 1 view -0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 287:./Drivers/src/stm32f10x_pwr.c ****   /* Check the parameters */
 288:./Drivers/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 388              		.loc 1 288 3 view .LVU82
 289:./Drivers/src/stm32f10x_pwr.c ****          
 290:./Drivers/src/stm32f10x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 389              		.loc 1 290 3 view .LVU83
 390              		.loc 1 290 6 is_stmt 0 view .LVU84
ARM GAS  /tmp/ccD4b4aw.s 			page 34


 391 0000 024A     		ldr	r2, .L30
 392 0002 1368     		ldr	r3, [r2]
 393              		.loc 1 290 11 view .LVU85
 394 0004 43EA8003 		orr	r3, r3, r0, lsl #2
 395 0008 1360     		str	r3, [r2]
 291:./Drivers/src/stm32f10x_pwr.c **** }
 396              		.loc 1 291 1 view .LVU86
 397 000a 7047     		bx	lr
 398              	.L31:
 399              		.align	2
 400              	.L30:
 401 000c 00700040 		.word	1073770496
 402              		.cfi_endproc
 403              	.LFE37:
 405              		.text
 406              	.Letext0:
 407              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 408              		.file 4 "cmsis/stm32f10x.h"
 409              		.file 5 "Drivers/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/ccD4b4aw.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_pwr.c
     /tmp/ccD4b4aw.s:19     .text.PWR_DeInit:00000000 $t
     /tmp/ccD4b4aw.s:25     .text.PWR_DeInit:00000000 PWR_DeInit
     /tmp/ccD4b4aw.s:52     .text.PWR_BackupAccessCmd:00000000 $t
     /tmp/ccD4b4aw.s:58     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
     /tmp/ccD4b4aw.s:76     .text.PWR_BackupAccessCmd:00000008 $d
     /tmp/ccD4b4aw.s:81     .text.PWR_PVDCmd:00000000 $t
     /tmp/ccD4b4aw.s:87     .text.PWR_PVDCmd:00000000 PWR_PVDCmd
     /tmp/ccD4b4aw.s:105    .text.PWR_PVDCmd:00000008 $d
     /tmp/ccD4b4aw.s:110    .text.PWR_PVDLevelConfig:00000000 $t
     /tmp/ccD4b4aw.s:116    .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
     /tmp/ccD4b4aw.s:147    .text.PWR_PVDLevelConfig:00000010 $d
     /tmp/ccD4b4aw.s:152    .text.PWR_WakeUpPinCmd:00000000 $t
     /tmp/ccD4b4aw.s:158    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
     /tmp/ccD4b4aw.s:176    .text.PWR_WakeUpPinCmd:00000008 $d
     /tmp/ccD4b4aw.s:181    .text.PWR_EnterSTOPMode:00000000 $t
     /tmp/ccD4b4aw.s:187    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
     /tmp/ccD4b4aw.s:270    .text.PWR_EnterSTOPMode:0000002c $d
     /tmp/ccD4b4aw.s:278    .text.PWR_EnterSTANDBYMode:00000000 $t
     /tmp/ccD4b4aw.s:284    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
     /tmp/ccD4b4aw.s:324    .text.PWR_EnterSTANDBYMode:00000018 $d
     /tmp/ccD4b4aw.s:330    .text.PWR_GetFlagStatus:00000000 $t
     /tmp/ccD4b4aw.s:336    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
     /tmp/ccD4b4aw.s:369    .text.PWR_GetFlagStatus:00000010 $d
     /tmp/ccD4b4aw.s:374    .text.PWR_ClearFlag:00000000 $t
     /tmp/ccD4b4aw.s:380    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
     /tmp/ccD4b4aw.s:401    .text.PWR_ClearFlag:0000000c $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
